/* ==============================================
*  Copyright Â©  2014  Ali M. Al-Bayaty
*  
*  SDES Encryption and Decryption is free software: you can redistribute
*  it and/or modify it under the terms of the GNU General Public License
*  as published by the Free Software Foundation, either version 3 of the
*  License, or any later version.
*  
*  SDES Encryption and Decryption is distributed in the hope that it will
*  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
*  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*  See the GNU General Public License for more details.
*  
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/* ==============================================
*  
*  SDES Encryption and Decryption
*  
*  MSEE Student: Ali M. Al-Bayaty
*  Instructor: Dr. James Marcus
*  CS 634: Cryptography and Data Security
*  Personal Website: <http://albayaty.github.io/>
*
*  ==============================================
*/

# ------------------------------------------------------------------
The main program:

The implementation of this SDES code uses Sage (Python) with the reference of "Cryptography and Network Security" (5th Ed), William Stallings.

Date: May 1, 2012
# ------------------------------------------------------------------

sage: # The expansions and permutations as lists of bit patterns:
sage: P10_data = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6];
sage: P8_data  = [6, 3, 7, 4, 8, 5, 10, 9];
sage: LS1_data = [2, 3, 4, 5, 1];
sage: LS2_data = [3, 4, 5, 1, 2];
sage: IP_data  = [2, 6, 3, 1, 4, 8, 5, 7];
sage: IPinv_data = [4, 1, 3, 5, 7, 2, 8, 6];
sage: EP_data = [4, 1, 2, 3, 2, 3, 4, 1];
sage: P4_data = [2, 4, 3, 1];
sage: SW_data = [5, 6, 7, 8, 1, 2, 3, 4];

sage: # SBox Lookup tables:
sage: S0_data = [ [1,0,3,2], [3,2,1,0], [0,2,1,3], [3,1,3,2] ];
sage: S1_data = [ [0,1,2,3], [2,0,1,3], [3,0,1,0], [2,1,0,3] ];

sage: # permute the data X with a defined list of permutation:
sage: def ApplyPermutation(X, permutation):
...      # permute the list X:
...      length = len(permutation);
...      return [X[permutation[j]-1] for j in xrange(length)];

sage: # These functions perform the SBox substitution:
sage: def ApplySBox(X, SBox):
...      row = 2*X[0]+X[3];
...      col = 2*X[1]+X[2];
...      out = SBox[row][col];
...      high = out&2;
...      # To get the bit with value 1 if the high > 1
...      if( high > 1 ):
...         high = 1;
...      return [high, out&1];
...
sage: def S0(X):
...      return ApplySBox(X, S0_data);
...
sage: def S1(X):    
...      return ApplySBox(X, S1_data);

sage: # Each of these functions use ApplyPermutation() and a permutation list to perform SDES Expansion, Permutation, and Swapping:
sage: def P10(X):                
...      return ApplyPermutation(X, P10_data);
...
sage: def P8(X):
...      return ApplyPermutation(X, P8_data);
...
sage: def IP(X):
...      return ApplyPermutation(X, IP_data);
...
sage: def IPinv(X):
...      return ApplyPermutation(X, IPinv_data);
...
sage: def EP(X):
...      return ApplyPermutation(X, EP_data);
...
sage: def P4(X):
...      return ApplyPermutation(X, P4_data);
...
sage: def SW(X):
...      return ApplyPermutation(X, SW_data);
...
sage: def LS1(X):
...      return ApplyPermutation(X, LS1_data);
...
sage: def LS2(X):
...      return ApplyPermutation(X, LS2_data);

sage: # Join Bits together:
sage: def concatenate(left, right):
...      ret = [left[j] for j in xrange(len(left))];
...      ret.extend(right);
...      return ret;

sage: # XORing two blocks together:
sage: def XorBlock(block1, block2):
...      length = len(block1);
...      if(length != len(block2) ):
...        raise ValueError, "XorBlock parameters must have same dimesions"
...      return [(block1[j]+block2[j])%2 for j in xrange(length)];

sage: # Return the left side of the block:
sage: def LeftHalfBits(block):
...      length = len(block);
...      return [block[j] for j in xrange(length/2)];

sage: # Return the right side of the block:
sage: def RightHalfBits(block):
...      length = len(block);
...      return [block[j] for j in xrange(length/2, length)];

sage: # Generate two Keys from the main one:
sage: def SDESKeySchedule(K):
...      temp_k = P10(K);
...      left_temp_k = LeftHalfBits(temp_k);
...      right_temp_k = RightHalfBits(temp_k);
...      k1left = LS1(left_temp_k);
...      k1right = LS1(right_temp_k);
...      k1temp = concatenate(k1left, k1right);
...      K1 = P8(k1temp);
...      k2left = LS2(k1left);
...      k2right = LS2(k1right);
...      k2temp = concatenate(k2left, k2right);
...      K2 = P8(k2temp);
...      return (K1, K2);

sage: # fK function implemetation:
sage: def f_K(block, K):
...      left_block = LeftHalfBits(block);
...      #print 'fK Left hand: %s' %(left_block)
...      right_block = RightHalfBits(block);
...      #print 'fK Right hand: %s' %(right_block)
...      temp_block1 = EP(right_block);
...      #print 'fK E/P: %s' %(temp_block1)
...      temp_block2 = XorBlock(temp_block1, K);
...      #print 'fK XOR: %s' %(temp_block2)
...      left_temp_block2 = LeftHalfBits(temp_block2);
...      #print 'fK Left hand 2: %s' %(left_temp_block2)
...      right_temp_block2 = RightHalfBits(temp_block2);
...      #print 'fK Right hand 2: %s' %(right_temp_block2)
...      S0_out = S0(left_temp_block2);
...      #print 'fK S0: %s' %(S0_out)
...      S1_out = S1(right_temp_block2);
...      #print 'fK S1: %s' %(S1_out)
...      temp_block3 = concatenate(S0_out, S1_out);
...      temp_block4 = P4(temp_block3);
...      #print 'fK P4: %s' %(temp_block4)
...      temp_block5 = XorBlock(temp_block4, left_block);
...      #print 'fK XOR 2: %s' %(temp_block5)
...      output_block = concatenate(temp_block5, right_block);
...      return output_block;

sage: # Performing the SDES Encryption algorithm:
sage: def SDES_Encrypt(plaintext, K):
...      (K1, K2) = SDESKeySchedule(K);
...      #print 'K1: %s' %(K1)
...      #print 'K2: %s' %(K2)
...      block1 = IP(plaintext);
...      #print 'IP: %s' %(block1)
...      block2 = f_K(block1, K1);
...      block3 = SW(block2);
...      print 'The intermediate result after SW operation while encrypting:'
...      print block3
...      block4 = f_K(block3, K2);
...      output_block = IPinv(block4);
...      print 'The result of the encryption (ciphertext): %s' %(output_block)
...      return output_block;

sage: # Performing the SDES Decryption algorithm:
sage: def SDES_Decrypt(ciphertext, K):
...      (K1, K2) = SDESKeySchedule(K);
...      block1 = IP(ciphertext);
...      block2 = f_K(block1, K2);
...      block3 = SW(block2);
...      print 'The intermediate result after SW operation while decrypting:'
...      print block3
...      block4 = f_K(block3, K1);
...      output_block = IPinv(block4);
...      print 'The result of the decryption (plaintext): %s' %(output_block)
...      return output_block;

# ------------------------------------------------------------------
# Output:
# ------------------------------------------------------------------
sage: P = [0,1,0,1,0,1,0,1];
sage: K = [1,0,1,1,0,0,0,1,1,1];
sage: C = SDES_Encrypt(P, K);
The intermediate result after SW operation while encrypting: 
 [1, 1, 0, 0, 0, 0, 1, 1]
The result of the encryption (ciphertext): [0, 0, 0, 0, 1, 1, 1, 0]
sage: C = [0,0,0,0,1,1,1,0];
sage: K = [1,0,1,1,0,0,0,1,1,1];
sage: P = SDES_Decrypt(C, K);
The intermediate result after SW operation while decrypting: 
 [0, 0, 1, 1, 1, 1, 0, 0]
The result of the decryption (plaintext): [0, 1, 0, 1, 0, 1, 0, 1]
# ------------------------------------------------------------------
